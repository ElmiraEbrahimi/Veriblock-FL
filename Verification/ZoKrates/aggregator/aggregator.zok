import "utils/casts/field_to_u32" as field_to_u32;
import "utils/casts/u32_to_field" as u32_to_field;
import "utils/casts/field_to_u64" as field_to_u64;
import "utils/casts/u64_to_field" as u64_to_field;

const field max = 0-1;
const field threshold = 20888242871839275222246405745257275088548364400416034343698204186575808495617;
const u32  fe = 9;
const u32  ac = 6;
const field ac_f=6;
const u32  bs = 10;
// k also needs to be defined # of participant in the client selection ex. 5.
// here we assume that aggregator uses all local models so k=c 
const u32  k = 9;
// number of all clients
const u32  c = 9;


def add(field mut a, field mut b, field mut a_sign, field mut b_sign) -> (field, field) {
    field mut a_cleansed = if a_sign==0 { a } else { max-a+1};
    field mut b_cleansed = if b_sign==0  {b} else {max-b+1};
    field mut c = if a_sign == b_sign && a_sign == 1 {(max+1-a_cleansed-b_cleansed)} else {a+b};
    field mut c_sign = if c > threshold {1} else {0} ;
    return (c, c_sign);
}


def subtract(field mut a, field mut b, field mut a_sign, field mut b_sign) -> (field, field) {
    field mut a_cleansed = if a_sign==0 {a} else {max-a+1} ;
    field mut b_cleansed = if b_sign==0 {b} else {max-b+1} ;
    field mut c = if a_sign != b_sign && a_sign==0 {a_cleansed+b_cleansed} else {a-b} ;
    field mut d = if c > threshold {1} else {0} ;
    return (c, d);
}

def divide(field mut a, field mut b, field mut a_sign, field mut b_sign) -> (field, field) {
    field mut a_cleansed = if a_sign==0 {a} else {max-a+1};
    field mut b_cleansed = if b_sign==0 {b} else {max-b+1};
    u64 a_u64 =field_to_u64(a_cleansed);
    u64 b_u64 = field_to_u64(b_cleansed);
    u64 remainder = a_u64%b_u64;
    // Adjust the numerator to ensure it's divisible by the denominator
    a_cleansed = u64_to_field(a_u64-remainder);
    field mut res = a_cleansed/b_cleansed;
    // Determine the sign of the result
    field mut sign = if a_sign==b_sign || res==0 {0} else {1};
    res = if sign == 0 {res} else {max+1-res};
    return (res, sign);
}

// Function to update global weights and biases
def update_global(
    field[ac][fe] mut global_w, 
    field[ac][fe] mut global_w_sign,
    field[ac] mut global_b, 
    field[ac] mut global_b_sign,
    field[k][ac][fe] local_w, 
    field[k][ac][fe] mut local_w_sign,
    field[k][ac] local_b, 
    field[k][ac] mut local_b_sign
) -> (field[ac][fe], field[ac], field[ac][fe], field[ac]) {
    
    // Initialize the new global parameters
    field[ac][fe] mut new_global_w = [[0; fe]; ac];
    field[ac] mut new_global_b = [0; ac];
    field[ac][fe] mut new_global_w_sign = [[0; fe]; ac];
    field[ac] mut new_global_b_sign = [0; ac];
    field k_field = u32_to_field(k); // Convert k to field type

    // Iterate over each client
    for u32 client in 0..k {
        // Update global weights for each client
        for u32 i in 0..ac {
            for u32 j in 0..fe {
                (field, field) tres = subtract(local_w[client][i][j], global_w[i][j], local_w_sign[client][i][j], global_w_sign[i][j]);
                field mut temp = tres.0;
                field mut temp_sign = tres.1;
                
                (field, field) tres2 = divide(temp, k_field, temp_sign, 0);
                temp = tres2.0;
                temp_sign = tres2.1;
                
                (field, field) tres3 = add(global_w[i][j], temp, global_w_sign[i][j], temp_sign);
                new_global_w[i][j] = tres3.0;
                new_global_w_sign[i][j] = tres3.1;
            }
        }

        // Update global biases for each client
        for u32 i in 0..ac {
            (field, field) tres = subtract(local_b[client][i], global_b[i], local_b_sign[client][i], global_b_sign[i]);
            field mut temp = tres.0;
            field mut temp_sign = tres.1;
            
            (field, field) tres2 = divide(temp, k_field, temp_sign, 0);
            temp = tres2.0;
            temp_sign = tres2.1;
            
            (field, field) tres3 = add(global_b[i], temp, global_b_sign[i], temp_sign);
            new_global_b[i] = tres3.0;
            new_global_b_sign[i] = tres3.1;
        }
    }

    return (new_global_w, new_global_b, new_global_w_sign, new_global_b_sign);
}
    

// Function to check if all ag_hash values are in sc_hash
def agg_selected_hash_check(field[c] sc_hash, field[k] ag_hash) -> field {
    field mut result = 1; // Assume all hashes match initially
    for u32 i in 0..k {
        field mut found = 0;
        for u32 j in 0..c {
            // Update 'found' if a match is found, but don't revert if a match was found earlier
            found = if ag_hash[i] == sc_hash[j] { 1 } else { found };
        }
        // If 'found' is still 0 for any i, it means a match wasn't found for ag_hash[i]
        result = if found == 0 { 0 } else { result };
    }
    return result; // Return 1 if all matches found, 0 otherwise
}
// we should check if aggregator used those verified model or not
def local_hash_check(field[c] sc_hash, field[k] local_params_hash) -> field {
    field mut is_current_hash_found = 1;// Assume all hashes match initially
    for u32 i in 0..k {
        for u32 j in 0..c {
            // Update 'found' if a match is found, but don't revert if a match was found earlier
            is_current_hash_found = if sc_hash[i] == local_params_hash[j] { is_current_hash_found } else {0};
        }
    }
    return is_current_hash_found; // Return 1 if all matches found, 0 otherwise
}

def mimc_cipher(field mut input, field[64] mut round_constants, field mut z) -> field{
  
  field mut a = 0;
  
  for u32 i in 0..64 {
    a = input + round_constants[i] + z;
    input = a ** 7;
  }
   return (input + z);
}

def mimc_hash(field[ac][fe] mut w, field[ac] mut b, field[64] mut round_constants) -> field {
    field mut z = 0;

    // Iterate over the activations/layers
    for u32 i in 0..ac {
        // Iterate over the features/weights per activation
        for u32 j in 0..fe {
            z = mimc_cipher(w[i][j], round_constants, z);
        }
        // Process the bias for each activation/layer
        z = mimc_cipher(b[i], round_constants, z);
    }

    return z;
}




def main(private field[k][ac][fe] mut local_w, private field[k][ac][fe] mut local_w_sign, 
    private field[k][ac] mut local_b, private field[k][ac] mut local_b_sign,
    private field[ac][fe] mut global_w, private field[ac][fe] mut global_w_sign,
    private field[ac] mut global_b, private field[ac] global_b_sign, 
    // field[c] local_params_hash, 
    field[c] sc_hash, field[k] mut ag_hash,
    private field[ac][fe] expected_global_w, private field[ac] expected_global_b,
    private field[ac][fe] expected_global_w_sign, private field[ac] expected_global_b_sign, 
    field mut digest) -> bool {
    
    field[ac][fe] mut computed_global_w = [[0; fe]; ac];
    field[ac][fe] mut computed_global_w_sign = [[0; fe]; ac];
    field[ac] mut computed_global_b = [0; ac];
    field[ac] mut computed_global_b_sign = [0; ac];
    bool mut is_correct = true;


    field[c] mut local_hash_check = [0; c];
    
    

    // Compute updated global weights and biases
    (field[ac][fe], field[ac], field[ac][fe], field[ac]) tres = update_global(
        global_w, global_w_sign, global_b, global_b_sign,
        local_w, local_w_sign, local_b, local_b_sign
    );
    computed_global_w = tres.0;
    computed_global_b = tres.1;
    computed_global_w_sign = tres.2;
    computed_global_b_sign = tres.3;

    // Check if computed values match the expected values
    for u32 i in 0..ac {
        for u32 j in 0..fe {
            
            is_correct = if is_correct && computed_global_w[i][j] != expected_global_w[i][j] && computed_global_w_sign[i][j] != expected_global_w_sign[i][j] {false} else {true};
            
        }
         
        is_correct = if is_correct && computed_global_b[i] != expected_global_b[i] && computed_global_b_sign[i] != expected_global_b_sign[i] {false} else {true};
    
    }
    
    assert (is_correct ==true);

       field[64] round_constants = [
        42, 43, 170, 2209, 16426, 78087, 279978, 823517, 2097194, 4782931,
        10000042, 19487209, 35831850, 62748495, 105413546, 170859333,
        268435498, 410338651, 612220074, 893871697, 1280000042, 1801088567,
        2494357930, 3404825421, 4586471466, 6103515587, 8031810218, 10460353177,
        13492928554, 17249876351, 21870000042, 27512614133, 34359738410,
        42618442955, 52523350186, 64339296833, 78364164138, 94931877159,
        114415582634, 137231006717, 163840000042, 194754273907, 230539333290,
        271818611081, 319277809706, 373669453167, 435817657258, 506623120485,
        587068342314, 678223072891, 781250000042, 897410677873, 1028071702570,
        1174711139799, 1338925210026, 1522435234413, 1727094849578,
        1954897493219, 2207984167594, 2488651484857, 2799360000042,
        3142742835999, 3521614606250, 3938980639125
    ];
    // Check if all ag_hash values are contained in sc_hash
    field ghashes_match = agg_selected_hash_check(sc_hash, ag_hash);
    // field lhashes_match =local_hash_check(sc_hash,local_params_hash);
    // assert(lhashes_match==1);

    for u32 i in 0..c {
        // Calculate hash for each client's weights and biases
        local_hash_check[i] = mimc_hash(local_w[i], local_b[i], round_constants);
    }

    field lhashes_match =local_hash_check(sc_hash, local_hash_check);
    assert(lhashes_match==1);




    
    field mut result = if mimc_hash(expected_global_w, expected_global_b, round_constants) == digest {1} else {0};
    return result == 1 && ghashes_match == 1 ;

}



